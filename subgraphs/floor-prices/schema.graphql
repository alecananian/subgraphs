enum Status {
  Active
  Inactive
  Unknown # Default and fallback
}

type Collection @entity {
  # { Contract }
  id: Bytes!

  "Last expires checked"
  nextExpiresTimestamp: Int!

  # Not derived because we need to loop through to check for expired
  listings: [Listing!]!
}

type Listing @entity {
  # { Contract }-{ Token Id }-{ Wallet }
  id: Bytes!

  "Listed/updated amount"
  amount: Int!

  "Available amount in a user wallet"
  available: UserToken!

  expires: Int!
  price: BigDecimal!
  token: Token!
  status: Status!
  user: User!
}

type Token @entity(immutable: true) {
  # { Contract }-{ Token Id }
  id: Bytes!

  name: String!

  listings: [Listing!]! @derivedFrom(field: "token")
  owners: [UserToken!]! @derivedFrom(field: "token")
}

type User @entity {
  # { Wallet }
  id: Bytes!

  tokens: [UserToken!]! @derivedFrom(field: "user")

  # Not derived because we need to loop the ids
  listings: [Listing!]!
}

type UserToken @entity {
  # { Contract }-{ Token Id }-{ Wallet }
  id: Bytes!

  "Amount in inventory"
  amount: Int!

  token: Token!
  user: User!
}
